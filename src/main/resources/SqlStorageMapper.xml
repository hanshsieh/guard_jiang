<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.guard_jiang.storage.SqlStorageMapper">
    <select id="getUserIds" resultType="String">
        select id from user where env = #{env}
    </select>
    <select id="getCredential" resultType="org.guard_jiang.Credential" timeout="3">
        select
            email,
            password,
            certificate,
            auth_token as authToken
        from "user" where id = #{userId}
    </select>
    <insert id="setCredential" timeout="3">
        update "user" set
            email = #{credential.email},
            password = #{credential.password},
            certificate = #{credential.certificate, jdbcType=VARCHAR},
            auth_token = #{credential.authToken, jdbcType=VARCHAR}
        where
            id = #{userId}
    </insert>
    <insert id="setGroupRole" timeout="3">
        insert or replace into "role" (
            group_id,
            user_id,
            role)
        values (
            #{groupId},
            #{userId},
            #{role}
        )
    </insert>
    <delete id="removeGroupRole" timeout="3">
        delete from "role" where
            group_id = #{groupId} and
            user_id = #{userId}
    </delete>
    <insert id="setGroupMetadata" timeout="3">
        insert or replace into "group" (
            id,
            recovery_expiry_ts,
            members_backup_ts)
        values (
            #{groupId},
            #{metadata.recoveryExpiryTime},
            #{metadata.membersBackupTime}
        )
    </insert>
    <select id="getGroupMetadata" timeout="3" resultType="org.guard_jiang.storage.GroupMetadata">
        select
            recovery_expiry_ts as recoveryExpiryTime,
            members_backup_ts as membersBackupTime
        from "group" where id = #{groupId}
    </select>
    <select id="getGroupRoles" timeout="3" resultType="org.guard_jiang.UserRole">
        select
            user_id as userId,
            role
        from "role"
        where group_id = #{groupId}
    </select>
    <select id="getGroupBlockingRecords" timeout="3" resultMap="groupBlockingRecords">
        select
            user_id,
            expiry_ts
        from "group_blocking_record"
        where group_id = #{groupId}
    </select>

    <insert id="setGroupBlockingRecord" timeout="3">
        insert or replace into "group_blocking_record" (
            group_id,
            user_id,
            expiry_ts)
        values (
            #{groupId},
            #{record.userId},
            #{record.expiryTime}
        )
    </insert>

    <select id="getGroupMembersBackup" resultType="String" timeout="3">
        select user_id
        from "group_member_backup" where group_id = #{groupId}
    </select>

    <insert id="addGroupMembersBackup" timeout="3">
        insert or replace into "group_member_backup" (
            group_id,
            user_id)
        values (
            #{groupId},
            #{userId}
        )
    </insert>

    <delete id="clearGroupMemberBackup" timeout="3">
        delete from "group_member_backup" where
            group_id = #{groupId}
    </delete>

    <select id="getChat" resultMap="chat" timeout="3">
        select
            host_id,
            guest_id,
            env_type,
            env_id,
            status,
            metadata
        from "chat" where
            host_id = #{hostId} and
            guest_id = #{guestId} and
            env_type = #{chatEnv.type} and
            env_id = #{chatEnv.id, javaType=String}
    </select>

    <insert id="setChat" timeout="3">
        insert or replace into "chat" (
            host_id,
            guest_id,
            env_type,
            env_id,
            status,
            metadata)
        values (
            #{chat.hostId},
            #{chat.guestId},
            #{chat.chatEnv.type},
            #{chat.chatEnv.id, javaType=String},
            #{chat.status},
            #{chat.metadata, typeHandler=org.guard_jiang.storage.JsonMapTypeHandler}
        )
    </insert>

    <select id="getLicensesOfUser" resultMap="license" timeout="3">
        select
            key,
            user_id,
            create_ts,
            expiry_ts,
            max_defenders,
            num_defenders,
            max_supporters,
            num_supporters
        from "license" where
            user_id = #{userId}
        order by create_ts desc
    </select>

    <insert id="createLicense" timeout="3">
        insert into "license" (
            key,
            user_id,
            create_ts,
            expiry_ts,
            max_defenders,
            num_defenders,
            max_supporters,
            num_supporters
        ) values (
            #{license.key},
            #{license.userId},
            #{license.createTime},
            #{license.expiryTime},
            #{license.maxDefenders},
            #{license.numDefenders},
            #{license.maxSupporters},
            #{license.numSupporters}
        )
    </insert>

    <update id="bindLicenseToUser" timeout="3">
        update "license" set
            user_id = #{userId}
        where
            key = #{key}
    </update>

    <update id="updateLicenseUsage" timeout="3">
        update "license" set
            num_defenders = num_defenders + #{defendersAdd},
            num_supporters = num_supporters + #{supportersAdd}
        where
            key = #{key}
    </update>

    <resultMap id="groupBlockingRecords" type="org.guard_jiang.BlockingRecord">
        <constructor>
            <idArg column="user_id" javaType="String" />
            <arg column="expiry_ts" javaType="java.time.Instant" />
        </constructor>
    </resultMap>

    <resultMap id="chat" type="org.guard_jiang.chat.Chat">
        <constructor>
            <idArg column="host_id" javaType="String" />
            <idArg column="guest_id" javaType="String" />
            <idArg javaType="org.guard_jiang.chat.ChatEnv" resultMap="chatEnv"/>
        </constructor>
        <result property="status" column="status" />
        <result property="metadata" column="metadata" typeHandler="org.guard_jiang.storage.JsonMapTypeHandler"/>
    </resultMap>

    <resultMap id="chatEnv" type="org.guard_jiang.chat.ChatEnv">
        <constructor>
            <idArg column="env_type" javaType="org.guard_jiang.chat.ChatEnvType" />
            <idArg column="env_id" javaType="String" />
        </constructor>
    </resultMap>

    <resultMap id="license" type="org.guard_jiang.License">
        <constructor>
            <idArg column="key" javaType="String" />
        </constructor>
        <result property="userId" column="user_id" />
        <result property="createTime" column="create_ts" />
        <result property="expiryTime" column="expiry_ts" />
        <result property="maxDefenders" column="max_defenders" />
        <result property="numDefenders" column="num_defenders" />
        <result property="maxSupporters" column="max_supporters" />
        <result property="numSupporters" column="num_supporters" />
    </resultMap>
</mapper>